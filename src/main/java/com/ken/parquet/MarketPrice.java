/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ken.parquet;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MarketPrice extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -23775901716748158L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MarketPrice\",\"namespace\":\"com.ken.parquet\",\"fields\":[{\"name\":\"performance_id\",\"type\":\"string\"},{\"name\":\"price_as_of_date\",\"type\":\"int\",\"logicalType\":\"date\"},{\"name\":\"open_price\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"high_price\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"low_price\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"close_price\",\"type\":[\"null\",\"double\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MarketPrice> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MarketPrice> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MarketPrice> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MarketPrice> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MarketPrice> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MarketPrice to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MarketPrice from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MarketPrice instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MarketPrice fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence performance_id;
  private int price_as_of_date;
  private java.lang.Double open_price;
  private java.lang.Double high_price;
  private java.lang.Double low_price;
  private java.lang.Double close_price;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MarketPrice() {}

  /**
   * All-args constructor.
   * @param performance_id The new value for performance_id
   * @param price_as_of_date The new value for price_as_of_date
   * @param open_price The new value for open_price
   * @param high_price The new value for high_price
   * @param low_price The new value for low_price
   * @param close_price The new value for close_price
   */
  public MarketPrice(java.lang.CharSequence performance_id, java.lang.Integer price_as_of_date, java.lang.Double open_price, java.lang.Double high_price, java.lang.Double low_price, java.lang.Double close_price) {
    this.performance_id = performance_id;
    this.price_as_of_date = price_as_of_date;
    this.open_price = open_price;
    this.high_price = high_price;
    this.low_price = low_price;
    this.close_price = close_price;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return performance_id;
    case 1: return price_as_of_date;
    case 2: return open_price;
    case 3: return high_price;
    case 4: return low_price;
    case 5: return close_price;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: performance_id = (java.lang.CharSequence)value$; break;
    case 1: price_as_of_date = (java.lang.Integer)value$; break;
    case 2: open_price = (java.lang.Double)value$; break;
    case 3: high_price = (java.lang.Double)value$; break;
    case 4: low_price = (java.lang.Double)value$; break;
    case 5: close_price = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'performance_id' field.
   * @return The value of the 'performance_id' field.
   */
  public java.lang.CharSequence getPerformanceId() {
    return performance_id;
  }


  /**
   * Sets the value of the 'performance_id' field.
   * @param value the value to set.
   */
  public void setPerformanceId(java.lang.CharSequence value) {
    this.performance_id = value;
  }

  /**
   * Gets the value of the 'price_as_of_date' field.
   * @return The value of the 'price_as_of_date' field.
   */
  public int getPriceAsOfDate() {
    return price_as_of_date;
  }


  /**
   * Sets the value of the 'price_as_of_date' field.
   * @param value the value to set.
   */
  public void setPriceAsOfDate(int value) {
    this.price_as_of_date = value;
  }

  /**
   * Gets the value of the 'open_price' field.
   * @return The value of the 'open_price' field.
   */
  public java.lang.Double getOpenPrice() {
    return open_price;
  }


  /**
   * Sets the value of the 'open_price' field.
   * @param value the value to set.
   */
  public void setOpenPrice(java.lang.Double value) {
    this.open_price = value;
  }

  /**
   * Gets the value of the 'high_price' field.
   * @return The value of the 'high_price' field.
   */
  public java.lang.Double getHighPrice() {
    return high_price;
  }


  /**
   * Sets the value of the 'high_price' field.
   * @param value the value to set.
   */
  public void setHighPrice(java.lang.Double value) {
    this.high_price = value;
  }

  /**
   * Gets the value of the 'low_price' field.
   * @return The value of the 'low_price' field.
   */
  public java.lang.Double getLowPrice() {
    return low_price;
  }


  /**
   * Sets the value of the 'low_price' field.
   * @param value the value to set.
   */
  public void setLowPrice(java.lang.Double value) {
    this.low_price = value;
  }

  /**
   * Gets the value of the 'close_price' field.
   * @return The value of the 'close_price' field.
   */
  public java.lang.Double getClosePrice() {
    return close_price;
  }


  /**
   * Sets the value of the 'close_price' field.
   * @param value the value to set.
   */
  public void setClosePrice(java.lang.Double value) {
    this.close_price = value;
  }

  /**
   * Creates a new MarketPrice RecordBuilder.
   * @return A new MarketPrice RecordBuilder
   */
  public static com.ken.parquet.MarketPrice.Builder newBuilder() {
    return new com.ken.parquet.MarketPrice.Builder();
  }

  /**
   * Creates a new MarketPrice RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MarketPrice RecordBuilder
   */
  public static com.ken.parquet.MarketPrice.Builder newBuilder(com.ken.parquet.MarketPrice.Builder other) {
    if (other == null) {
      return new com.ken.parquet.MarketPrice.Builder();
    } else {
      return new com.ken.parquet.MarketPrice.Builder(other);
    }
  }

  /**
   * Creates a new MarketPrice RecordBuilder by copying an existing MarketPrice instance.
   * @param other The existing instance to copy.
   * @return A new MarketPrice RecordBuilder
   */
  public static com.ken.parquet.MarketPrice.Builder newBuilder(com.ken.parquet.MarketPrice other) {
    if (other == null) {
      return new com.ken.parquet.MarketPrice.Builder();
    } else {
      return new com.ken.parquet.MarketPrice.Builder(other);
    }
  }

  /**
   * RecordBuilder for MarketPrice instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MarketPrice>
    implements org.apache.avro.data.RecordBuilder<MarketPrice> {

    private java.lang.CharSequence performance_id;
    private int price_as_of_date;
    private java.lang.Double open_price;
    private java.lang.Double high_price;
    private java.lang.Double low_price;
    private java.lang.Double close_price;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ken.parquet.MarketPrice.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.performance_id)) {
        this.performance_id = data().deepCopy(fields()[0].schema(), other.performance_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.price_as_of_date)) {
        this.price_as_of_date = data().deepCopy(fields()[1].schema(), other.price_as_of_date);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.open_price)) {
        this.open_price = data().deepCopy(fields()[2].schema(), other.open_price);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.high_price)) {
        this.high_price = data().deepCopy(fields()[3].schema(), other.high_price);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.low_price)) {
        this.low_price = data().deepCopy(fields()[4].schema(), other.low_price);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.close_price)) {
        this.close_price = data().deepCopy(fields()[5].schema(), other.close_price);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing MarketPrice instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ken.parquet.MarketPrice other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.performance_id)) {
        this.performance_id = data().deepCopy(fields()[0].schema(), other.performance_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.price_as_of_date)) {
        this.price_as_of_date = data().deepCopy(fields()[1].schema(), other.price_as_of_date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.open_price)) {
        this.open_price = data().deepCopy(fields()[2].schema(), other.open_price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.high_price)) {
        this.high_price = data().deepCopy(fields()[3].schema(), other.high_price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.low_price)) {
        this.low_price = data().deepCopy(fields()[4].schema(), other.low_price);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.close_price)) {
        this.close_price = data().deepCopy(fields()[5].schema(), other.close_price);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'performance_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getPerformanceId() {
      return performance_id;
    }


    /**
      * Sets the value of the 'performance_id' field.
      * @param value The value of 'performance_id'.
      * @return This builder.
      */
    public com.ken.parquet.MarketPrice.Builder setPerformanceId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.performance_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'performance_id' field has been set.
      * @return True if the 'performance_id' field has been set, false otherwise.
      */
    public boolean hasPerformanceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'performance_id' field.
      * @return This builder.
      */
    public com.ken.parquet.MarketPrice.Builder clearPerformanceId() {
      performance_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'price_as_of_date' field.
      * @return The value.
      */
    public int getPriceAsOfDate() {
      return price_as_of_date;
    }


    /**
      * Sets the value of the 'price_as_of_date' field.
      * @param value The value of 'price_as_of_date'.
      * @return This builder.
      */
    public com.ken.parquet.MarketPrice.Builder setPriceAsOfDate(int value) {
      validate(fields()[1], value);
      this.price_as_of_date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'price_as_of_date' field has been set.
      * @return True if the 'price_as_of_date' field has been set, false otherwise.
      */
    public boolean hasPriceAsOfDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'price_as_of_date' field.
      * @return This builder.
      */
    public com.ken.parquet.MarketPrice.Builder clearPriceAsOfDate() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'open_price' field.
      * @return The value.
      */
    public java.lang.Double getOpenPrice() {
      return open_price;
    }


    /**
      * Sets the value of the 'open_price' field.
      * @param value The value of 'open_price'.
      * @return This builder.
      */
    public com.ken.parquet.MarketPrice.Builder setOpenPrice(java.lang.Double value) {
      validate(fields()[2], value);
      this.open_price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'open_price' field has been set.
      * @return True if the 'open_price' field has been set, false otherwise.
      */
    public boolean hasOpenPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'open_price' field.
      * @return This builder.
      */
    public com.ken.parquet.MarketPrice.Builder clearOpenPrice() {
      open_price = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'high_price' field.
      * @return The value.
      */
    public java.lang.Double getHighPrice() {
      return high_price;
    }


    /**
      * Sets the value of the 'high_price' field.
      * @param value The value of 'high_price'.
      * @return This builder.
      */
    public com.ken.parquet.MarketPrice.Builder setHighPrice(java.lang.Double value) {
      validate(fields()[3], value);
      this.high_price = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'high_price' field has been set.
      * @return True if the 'high_price' field has been set, false otherwise.
      */
    public boolean hasHighPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'high_price' field.
      * @return This builder.
      */
    public com.ken.parquet.MarketPrice.Builder clearHighPrice() {
      high_price = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'low_price' field.
      * @return The value.
      */
    public java.lang.Double getLowPrice() {
      return low_price;
    }


    /**
      * Sets the value of the 'low_price' field.
      * @param value The value of 'low_price'.
      * @return This builder.
      */
    public com.ken.parquet.MarketPrice.Builder setLowPrice(java.lang.Double value) {
      validate(fields()[4], value);
      this.low_price = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'low_price' field has been set.
      * @return True if the 'low_price' field has been set, false otherwise.
      */
    public boolean hasLowPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'low_price' field.
      * @return This builder.
      */
    public com.ken.parquet.MarketPrice.Builder clearLowPrice() {
      low_price = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'close_price' field.
      * @return The value.
      */
    public java.lang.Double getClosePrice() {
      return close_price;
    }


    /**
      * Sets the value of the 'close_price' field.
      * @param value The value of 'close_price'.
      * @return This builder.
      */
    public com.ken.parquet.MarketPrice.Builder setClosePrice(java.lang.Double value) {
      validate(fields()[5], value);
      this.close_price = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'close_price' field has been set.
      * @return True if the 'close_price' field has been set, false otherwise.
      */
    public boolean hasClosePrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'close_price' field.
      * @return This builder.
      */
    public com.ken.parquet.MarketPrice.Builder clearClosePrice() {
      close_price = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MarketPrice build() {
      try {
        MarketPrice record = new MarketPrice();
        record.performance_id = fieldSetFlags()[0] ? this.performance_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.price_as_of_date = fieldSetFlags()[1] ? this.price_as_of_date : (java.lang.Integer) defaultValue(fields()[1]);
        record.open_price = fieldSetFlags()[2] ? this.open_price : (java.lang.Double) defaultValue(fields()[2]);
        record.high_price = fieldSetFlags()[3] ? this.high_price : (java.lang.Double) defaultValue(fields()[3]);
        record.low_price = fieldSetFlags()[4] ? this.low_price : (java.lang.Double) defaultValue(fields()[4]);
        record.close_price = fieldSetFlags()[5] ? this.close_price : (java.lang.Double) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MarketPrice>
    WRITER$ = (org.apache.avro.io.DatumWriter<MarketPrice>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MarketPrice>
    READER$ = (org.apache.avro.io.DatumReader<MarketPrice>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.performance_id);

    out.writeInt(this.price_as_of_date);

    if (this.open_price == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.open_price);
    }

    if (this.high_price == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.high_price);
    }

    if (this.low_price == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.low_price);
    }

    if (this.close_price == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.close_price);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.performance_id = in.readString(this.performance_id instanceof Utf8 ? (Utf8)this.performance_id : null);

      this.price_as_of_date = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.open_price = null;
      } else {
        this.open_price = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.high_price = null;
      } else {
        this.high_price = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.low_price = null;
      } else {
        this.low_price = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.close_price = null;
      } else {
        this.close_price = in.readDouble();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.performance_id = in.readString(this.performance_id instanceof Utf8 ? (Utf8)this.performance_id : null);
          break;

        case 1:
          this.price_as_of_date = in.readInt();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.open_price = null;
          } else {
            this.open_price = in.readDouble();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.high_price = null;
          } else {
            this.high_price = in.readDouble();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.low_price = null;
          } else {
            this.low_price = in.readDouble();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.close_price = null;
          } else {
            this.close_price = in.readDouble();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










